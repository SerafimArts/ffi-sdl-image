

// =====================================================================================================================
//  Type Definitions
// =====================================================================================================================


typedef int8_t Sint8;
typedef uint8_t Uint8;
typedef int16_t Sint16;
typedef uint16_t Uint16;
typedef int32_t Sint32;
typedef uint32_t Uint32;
typedef int64_t Sint64;
typedef uint64_t Uint64;

typedef enum {
  SDL_ASSERTION_RETRY,
  SDL_ASSERTION_BREAK,
  SDL_ASSERTION_ABORT,
  SDL_ASSERTION_IGNORE,
  SDL_ASSERTION_ALWAYS_IGNORE
} SDL_AssertState;

typedef struct SDL_AssertData {
  int always_ignore;
  unsigned int trigger_count;
  const char* condition;
  const char* filename;
  int linenum;
  const char* function;
  const struct SDL_AssertData* next;
} SDL_AssertData;

typedef SDL_AssertState (* SDL_AssertionHandler)(const SDL_AssertData* data, void* userdata);

typedef int SDL_SpinLock;

typedef struct {
  int value;
} SDL_AtomicT;

struct SDL_Mutex;

typedef struct SDL_Mutex SDL_Mutex;

struct SDL_Semaphore;

typedef struct SDL_Semaphore SDL_Semaphore;

struct SDL_Cond;

typedef struct SDL_Cond SDL_Cond;

struct SDL_Thread;

typedef struct SDL_Thread SDL_Thread;

typedef unsigned long SDL_threadId;

typedef unsigned int SDL_TLSID;

typedef enum {
  SDL_THREAD_PRIORITY_LOW,
  SDL_THREAD_PRIORITY_NORMAL,
  SDL_THREAD_PRIORITY_HIGH,
  SDL_THREAD_PRIORITY_TIME_CRITICAL
} SDL_ThreadPriority;

typedef int (* SDL_ThreadFunction)(void* data);

typedef uintptr_t(__attribute__((__cdecl__)) *pfnSDL_CurrentBeginThread)(void *, unsigned, unsigned (__attribute__((__stdcall__)) *func)(void *), void *, unsigned, unsigned *);

typedef void (__attribute__((__cdecl__)) *pfnSDL_CurrentEndThread)(unsigned code);

typedef struct SDL_RWops {
  Sint64 ( *size)(struct SDL_RWops* context);
  Sint64 ( *seek)(struct SDL_RWops* context, Sint64 offset, int whence);
  size_t ( *read)(struct SDL_RWops* context, void* ptr, size_t size, size_t maxnum);
  size_t ( *write)(struct SDL_RWops* context, const void* ptr, size_t size, size_t num);
  int ( *close)(struct SDL_RWops* context);
  Uint32 type;
  union {
    struct {
      int append;
      void* h;
      struct {
        void* data;
        size_t size;
        size_t left;
      } buffer;
    } windowsio;
    struct {
      Uint8 *base;
      Uint8 *here;
      Uint8 *stop;
    } mem;
    struct {
      void* data1;
      void* data2;
    } unknown;
  } hidden;
} SDL_RWops;

typedef Uint16 SDL_AudioFormat;

typedef void (* SDL_AudioCallback)(void* userdata, Uint8 *stream, int len);

typedef struct SDL_AudioSpec {
  int freq;
  SDL_AudioFormat format;
  Uint8 channels;
  Uint8 silence;
  Uint16 samples;
  Uint16 padding;
  Uint32 size;
  SDL_AudioCallback callback;
  void* userdata;
} SDL_AudioSpec;

struct SDL_AudioCVT;

typedef void (* SDL_AudioFilter)(struct SDL_AudioCVT *cvt, SDL_AudioFormat format);

typedef struct SDL_AudioCVT {
  int needed;
  SDL_AudioFormat src_format;
  SDL_AudioFormat dst_format;
  double rate_incr;
  Uint8 *buf;
  int len;
  int len_cvt;
  int len_mult;
  double len_ratio;
  SDL_AudioFilter filters[9 + 1];
  int filter_index;
} __attribute__((packed)) SDL_AudioCVT;

typedef Uint32 SDL_AudioDeviceID;

typedef enum {
  SDL_AUDIO_STOPPED = 0,
  SDL_AUDIO_PLAYING,
  SDL_AUDIO_PAUSED
} SDL_AudioStatus;

struct _SDL_AudioStream;

typedef struct _SDL_AudioStream SDL_AudioStream;

enum {
  SDL_PIXELTYPE_UNKNOWN,
  SDL_PIXELTYPE_INDEX1,
  SDL_PIXELTYPE_INDEX4,
  SDL_PIXELTYPE_INDEX8,
  SDL_PIXELTYPE_PACKED8,
  SDL_PIXELTYPE_PACKED16,
  SDL_PIXELTYPE_PACKED32,
  SDL_PIXELTYPE_ARRAYU8,
  SDL_PIXELTYPE_ARRAYU16,
  SDL_PIXELTYPE_ARRAYU32,
  SDL_PIXELTYPE_ARRAYF16,
  SDL_PIXELTYPE_ARRAYF32
};

enum {
  SDL_BITMAPORDER_NONE,
  SDL_BITMAPORDER_4321,
  SDL_BITMAPORDER_1234
};

enum {
  SDL_PACKEDORDER_NONE,
  SDL_PACKEDORDER_XRGB,
  SDL_PACKEDORDER_RGBX,
  SDL_PACKEDORDER_ARGB,
  SDL_PACKEDORDER_RGBA,
  SDL_PACKEDORDER_XBGR,
  SDL_PACKEDORDER_BGRX,
  SDL_PACKEDORDER_ABGR,
  SDL_PACKEDORDER_BGRA
};

enum {
  SDL_ARRAYORDER_NONE,
  SDL_ARRAYORDER_RGB,
  SDL_ARRAYORDER_RGBA,
  SDL_ARRAYORDER_ARGB,
  SDL_ARRAYORDER_BGR,
  SDL_ARRAYORDER_BGRA,
  SDL_ARRAYORDER_ABGR
};

enum {
  SDL_PACKEDLAYOUT_NONE,
  SDL_PACKEDLAYOUT_332,
  SDL_PACKEDLAYOUT_4444,
  SDL_PACKEDLAYOUT_1555,
  SDL_PACKEDLAYOUT_5551,
  SDL_PACKEDLAYOUT_565,
  SDL_PACKEDLAYOUT_8888,
  SDL_PACKEDLAYOUT_2101010,
  SDL_PACKEDLAYOUT_1010102
};

typedef enum {
  SDL_PIXELFORMAT_UNKNOWN,
  SDL_PIXELFORMAT_INDEX1LSB = ((1 << 28) | ((SDL_PIXELTYPE_INDEX1) << 24) | ((SDL_BITMAPORDER_4321) << 20) | ((0) << 16) | ((1) << 8) | ((0) << 0)),
  SDL_PIXELFORMAT_INDEX1MSB = ((1 << 28) | ((SDL_PIXELTYPE_INDEX1) << 24) | ((SDL_BITMAPORDER_1234) << 20) | ((0) << 16) | ((1) << 8) | ((0) << 0)),
  SDL_PIXELFORMAT_INDEX4LSB = ((1 << 28) | ((SDL_PIXELTYPE_INDEX4) << 24) | ((SDL_BITMAPORDER_4321) << 20) | ((0) << 16) | ((4) << 8) | ((0) << 0)),
  SDL_PIXELFORMAT_INDEX4MSB = ((1 << 28) | ((SDL_PIXELTYPE_INDEX4) << 24) | ((SDL_BITMAPORDER_1234) << 20) | ((0) << 16) | ((4) << 8) | ((0) << 0)),
  SDL_PIXELFORMAT_INDEX8 = ((1 << 28) | ((SDL_PIXELTYPE_INDEX8) << 24) | ((0) << 20) | ((0) << 16) | ((8) << 8) | ((1) << 0)),
  SDL_PIXELFORMAT_RGB332 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED8) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_332) << 16) | ((8) << 8) | ((1) << 0)),
  SDL_PIXELFORMAT_RGB444 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((12) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGB555 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((15) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_BGR555 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((15) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_ARGB4444 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGBA4444 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_ABGR4444 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_BGRA4444 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_ARGB1555 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGBA5551 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_5551) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_ABGR1555 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_BGRA5551 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_5551) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGB565 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_565) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_BGR565 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_565) << 16) | ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGB24 = ((1 << 28) | ((SDL_PIXELTYPE_ARRAYU8) << 24) | ((SDL_ARRAYORDER_RGB) << 20) | ((0) << 16) | ((24) << 8) | ((3) << 0)),
  SDL_PIXELFORMAT_BGR24 = ((1 << 28) | ((SDL_PIXELTYPE_ARRAYU8) << 24) | ((SDL_ARRAYORDER_BGR) << 20) | ((0) << 16) | ((24) << 8) | ((3) << 0)),
  SDL_PIXELFORMAT_RGB888 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_RGBX8888 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_RGBX) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_BGR888 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_BGRX8888 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_BGRX) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((24) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_ARGB8888 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_RGBA8888 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_ABGR8888 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_BGRA8888 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) | ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_ARGB2101010 = ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) | ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_2101010) << 16) | ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888,
  SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888,
  SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888,
  SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888,
  SDL_PIXELFORMAT_YV12 = ((((Uint32) (((Uint8) (('Y'))))) << 0) | (((Uint32) (((Uint8) (('V'))))) << 8) | (((Uint32) (((Uint8) (('1'))))) << 16) | (((Uint32) (((Uint8) (('2'))))) << 24)),
  SDL_PIXELFORMAT_IYUV = ((((Uint32) (((Uint8) (('I'))))) << 0) | (((Uint32) (((Uint8) (('Y'))))) << 8) | (((Uint32) (((Uint8) (('U'))))) << 16) | (((Uint32) (((Uint8) (('V'))))) << 24)),
  SDL_PIXELFORMAT_YUY2 = ((((Uint32) (((Uint8) (('Y'))))) << 0) | (((Uint32) (((Uint8) (('U'))))) << 8) | (((Uint32) (((Uint8) (('Y'))))) << 16) | (((Uint32) (((Uint8) (('2'))))) << 24)),
  SDL_PIXELFORMAT_UYVY = ((((Uint32) (((Uint8) (('U'))))) << 0) | (((Uint32) (((Uint8) (('Y'))))) << 8) | (((Uint32) (((Uint8) (('V'))))) << 16) | (((Uint32) (((Uint8) (('Y'))))) << 24)),
  SDL_PIXELFORMAT_YVYU = ((((Uint32) (((Uint8) (('Y'))))) << 0) | (((Uint32) (((Uint8) (('V'))))) << 8) | (((Uint32) (((Uint8) (('Y'))))) << 16) | (((Uint32) (((Uint8) (('U'))))) << 24)),
  SDL_PIXELFORMAT_NV12 = ((((Uint32) (((Uint8) (('N'))))) << 0) | (((Uint32) (((Uint8) (('V'))))) << 8) | (((Uint32) (((Uint8) (('1'))))) << 16) | (((Uint32) (((Uint8) (('2'))))) << 24)),
  SDL_PIXELFORMAT_NV21 = ((((Uint32) (((Uint8) (('N'))))) << 0) | (((Uint32) (((Uint8) (('V'))))) << 8) | (((Uint32) (((Uint8) (('2'))))) << 16) | (((Uint32) (((Uint8) (('1'))))) << 24)),
  SDL_PIXELFORMAT_EXTERNAL_OES = ((((Uint32) (((Uint8) (('O'))))) << 0) | (((Uint32) (((Uint8) (('E'))))) << 8) | (((Uint32) (((Uint8) (('S'))))) << 16) | (((Uint32) (((Uint8) ((' '))))) << 24))
} SDL_PixelFormatEnum;

typedef struct SDL_Color {
  Uint8 r;
  Uint8 g;
  Uint8 b;
  Uint8 a;
} SDL_Color;

typedef struct SDL_Palette {
  int ncolors;
  SDL_Color* colors;
  Uint32 version;
  int refcount;
} SDL_Palette;

typedef struct SDL_PixelFormat {
  Uint32 format;
  SDL_Palette* palette;
  Uint8 BitsPerPixel;
  Uint8 BytesPerPixel;
  Uint8 padding[2];
  Uint32 Rmask;
  Uint32 Gmask;
  Uint32 Bmask;
  Uint32 Amask;
  Uint8 Rloss;
  Uint8 Gloss;
  Uint8 Bloss;
  Uint8 Aloss;
  Uint8 Rshift;
  Uint8 Gshift;
  Uint8 Bshift;
  Uint8 Ashift;
  int refcount;
  struct SDL_PixelFormat* next;
} SDL_PixelFormat;

typedef struct SDL_Point {
  int x;
  int y;
} SDL_Point;

typedef struct SDL_FPoint {
  float x;
  float y;
} SDL_FPoint;

typedef struct SDL_Rect {
  int x, y;
  int w, h;
} SDL_Rect;

typedef struct SDL_FRect {
  float x;
  float y;
  float w;
  float h;
} SDL_FRect;

typedef enum {
  SDL_BLENDMODE_NONE = 0x00000000,
  SDL_BLENDMODE_BLEND = 0x00000001,
  SDL_BLENDMODE_ADD = 0x00000002,
  SDL_BLENDMODE_MOD = 0x00000004,
  SDL_BLENDMODE_INVALID = 0x7FFFFFFF
} SDL_BlendMode;

typedef enum {
  SDL_BLENDOPERATION_ADD = 0x1,
  SDL_BLENDOPERATION_SUBTRACT = 0x2,
  SDL_BLENDOPERATION_REV_SUBTRACT = 0x3,
  SDL_BLENDOPERATION_MINIMUM = 0x4,
  SDL_BLENDOPERATION_MAXIMUM = 0x5
} SDL_BlendOperation;

typedef enum {
  SDL_BLENDFACTOR_ZERO = 0x1,
  SDL_BLENDFACTOR_ONE = 0x2,
  SDL_BLENDFACTOR_SRC_COLOR = 0x3,
  SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4,
  SDL_BLENDFACTOR_SRC_ALPHA = 0x5,
  SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6,
  SDL_BLENDFACTOR_DST_COLOR = 0x7,
  SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8,
  SDL_BLENDFACTOR_DST_ALPHA = 0x9,
  SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA
} SDL_BlendFactor;

typedef struct SDL_Surface {
  Uint32 flags;
  SDL_PixelFormat* format;
  int w, h;
  int pitch;
  void* pixels;
  void* userdata;
  int locked;
  void* lock_data;
  SDL_Rect clip_rect;
  struct SDL_BlitMap* map;
  int refcount;
} SDL_Surface;

typedef int (* SDL_Blit)(struct SDL_Surface* src, SDL_Rect* srcrect, struct SDL_Surface* dst, SDL_Rect* dstrect);

typedef enum {
  SDL_YUV_CONVERSION_JPEG,
  SDL_YUV_CONVERSION_BT601,
  SDL_YUV_CONVERSION_BT709,
  SDL_YUV_CONVERSION_AUTOMATIC
} SDL_YUV_CONVERSION_MODE;

typedef struct {
  Uint32 format;
  int w;
  int h;
  int refresh_rate;
  void* driverdata;
} SDL_DisplayMode;

typedef struct SDL_Window SDL_Window;

typedef enum {
  SDL_WINDOW_FULLSCREEN = 0x00000001,
  SDL_WINDOW_OPENGL = 0x00000002,
  SDL_WINDOW_SHOWN = 0x00000004,
  SDL_WINDOW_HIDDEN = 0x00000008,
  SDL_WINDOW_BORDERLESS = 0x00000010,
  SDL_WINDOW_RESIZABLE = 0x00000020,
  SDL_WINDOW_MINIMIZED = 0x00000040,
  SDL_WINDOW_MAXIMIZED = 0x00000080,
  SDL_WINDOW_INPUT_GRABBED = 0x00000100,
  SDL_WINDOW_INPUT_FOCUS = 0x00000200,
  SDL_WINDOW_MOUSE_FOCUS = 0x00000400,
  SDL_WINDOW_FULLSCREEN_DESKTOP = (SDL_WINDOW_FULLSCREEN | 0x00001000),
  SDL_WINDOW_FOREIGN = 0x00000800,
  SDL_WINDOW_ALLOW_HIGHDPI = 0x00002000,
  SDL_WINDOW_MOUSE_CAPTURE = 0x00004000,
  SDL_WINDOW_ALWAYS_ON_TOP = 0x00008000,
  SDL_WINDOW_SKIP_TASKBAR = 0x00010000,
  SDL_WINDOW_UTILITY = 0x00020000,
  SDL_WINDOW_TOOLTIP = 0x00040000,
  SDL_WINDOW_POPUP_MENU = 0x00080000,
  SDL_WINDOW_VULKAN = 0x10000000
} SDL_WindowFlags;

typedef enum {
  SDL_WINDOWEVENT_NONE,
  SDL_WINDOWEVENT_SHOWN,
  SDL_WINDOWEVENT_HIDDEN,
  SDL_WINDOWEVENT_EXPOSED,
  SDL_WINDOWEVENT_MOVED,
  SDL_WINDOWEVENT_RESIZED,
  SDL_WINDOWEVENT_SIZE_CHANGED,
  SDL_WINDOWEVENT_MINIMIZED,
  SDL_WINDOWEVENT_MAXIMIZED,
  SDL_WINDOWEVENT_RESTORED,
  SDL_WINDOWEVENT_ENTER,
  SDL_WINDOWEVENT_LEAVE,
  SDL_WINDOWEVENT_FOCUS_GAINED,
  SDL_WINDOWEVENT_FOCUS_LOST,
  SDL_WINDOWEVENT_CLOSE,
  SDL_WINDOWEVENT_TAKE_FOCUS,
  SDL_WINDOWEVENT_HIT_TEST
} SDL_WindowEventID;

typedef enum {
  SDL_DISPLAYEVENT_NONE,
  SDL_DISPLAYEVENT_ORIENTATION
} SDL_DisplayEventID;

typedef enum {
  SDL_ORIENTATION_UNKNOWN,
  SDL_ORIENTATION_LANDSCAPE,
  SDL_ORIENTATION_LANDSCAPE_FLIPPED,
  SDL_ORIENTATION_PORTRAIT,
  SDL_ORIENTATION_PORTRAIT_FLIPPED
} SDL_DisplayOrientation;

typedef void* SDL_GLContext;

typedef enum {
  SDL_GL_RED_SIZE,
  SDL_GL_GREEN_SIZE,
  SDL_GL_BLUE_SIZE,
  SDL_GL_ALPHA_SIZE,
  SDL_GL_BUFFER_SIZE,
  SDL_GL_DOUBLEBUFFER,
  SDL_GL_DEPTH_SIZE,
  SDL_GL_STENCIL_SIZE,
  SDL_GL_ACCUM_RED_SIZE,
  SDL_GL_ACCUM_GREEN_SIZE,
  SDL_GL_ACCUM_BLUE_SIZE,
  SDL_GL_ACCUM_ALPHA_SIZE,
  SDL_GL_STEREO,
  SDL_GL_MULTISAMPLEBUFFERS,
  SDL_GL_MULTISAMPLESAMPLES,
  SDL_GL_ACCELERATED_VISUAL,
  SDL_GL_RETAINED_BACKING,
  SDL_GL_CONTEXT_MAJOR_VERSION,
  SDL_GL_CONTEXT_MINOR_VERSION,
  SDL_GL_CONTEXT_EGL,
  SDL_GL_CONTEXT_FLAGS,
  SDL_GL_CONTEXT_PROFILE_MASK,
  SDL_GL_SHARE_WITH_CURRENT_CONTEXT,
  SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR,
  SDL_GL_CONTEXT_RESET_NOTIFICATION,
  SDL_GL_CONTEXT_NO_ERROR
} SDL_GLattr;

typedef enum {
  SDL_GL_CONTEXT_PROFILE_CORE = 0x0001,
  SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x0002,
  SDL_GL_CONTEXT_PROFILE_ES = 0x0004
} SDL_GLprofile;

typedef enum {
  SDL_GL_CONTEXT_DEBUG_FLAG = 0x0001,
  SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002,
  SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0x0004,
  SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0x0008
} SDL_GLcontextFlag;

typedef enum {
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0x0000,
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x0001
} SDL_GLcontextReleaseFlag;

typedef enum {
  SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0x0000,
  SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0x0001
} SDL_GLContextResetNotification;

typedef enum {
  SDL_HITTEST_NORMAL,
  SDL_HITTEST_DRAGGABLE,
  SDL_HITTEST_RESIZE_TOPLEFT,
  SDL_HITTEST_RESIZE_TOP,
  SDL_HITTEST_RESIZE_TOPRIGHT,
  SDL_HITTEST_RESIZE_RIGHT,
  SDL_HITTEST_RESIZE_BOTTOMRIGHT,
  SDL_HITTEST_RESIZE_BOTTOM,
  SDL_HITTEST_RESIZE_BOTTOMLEFT,
  SDL_HITTEST_RESIZE_LEFT
} SDL_HitTestResult;

typedef SDL_HitTestResult (* SDL_HitTest)(SDL_Window* win, const SDL_Point* area, void* data);

typedef enum {
  SDL_SCANCODE_UNKNOWN = 0,
  SDL_SCANCODE_A = 4,
  SDL_SCANCODE_B = 5,
  SDL_SCANCODE_C = 6,
  SDL_SCANCODE_D = 7,
  SDL_SCANCODE_E = 8,
  SDL_SCANCODE_F = 9,
  SDL_SCANCODE_G = 10,
  SDL_SCANCODE_H = 11,
  SDL_SCANCODE_I = 12,
  SDL_SCANCODE_J = 13,
  SDL_SCANCODE_K = 14,
  SDL_SCANCODE_L = 15,
  SDL_SCANCODE_M = 16,
  SDL_SCANCODE_N = 17,
  SDL_SCANCODE_O = 18,
  SDL_SCANCODE_P = 19,
  SDL_SCANCODE_Q = 20,
  SDL_SCANCODE_R = 21,
  SDL_SCANCODE_S = 22,
  SDL_SCANCODE_T = 23,
  SDL_SCANCODE_U = 24,
  SDL_SCANCODE_V = 25,
  SDL_SCANCODE_W = 26,
  SDL_SCANCODE_X = 27,
  SDL_SCANCODE_Y = 28,
  SDL_SCANCODE_Z = 29,
  SDL_SCANCODE_1 = 30,
  SDL_SCANCODE_2 = 31,
  SDL_SCANCODE_3 = 32,
  SDL_SCANCODE_4 = 33,
  SDL_SCANCODE_5 = 34,
  SDL_SCANCODE_6 = 35,
  SDL_SCANCODE_7 = 36,
  SDL_SCANCODE_8 = 37,
  SDL_SCANCODE_9 = 38,
  SDL_SCANCODE_0 = 39,
  SDL_SCANCODE_RETURN = 40,
  SDL_SCANCODE_ESCAPE = 41,
  SDL_SCANCODE_BACKSPACE = 42,
  SDL_SCANCODE_TAB = 43,
  SDL_SCANCODE_SPACE = 44,
  SDL_SCANCODE_MINUS = 45,
  SDL_SCANCODE_EQUALS = 46,
  SDL_SCANCODE_LEFTBRACKET = 47,
  SDL_SCANCODE_RIGHTBRACKET = 48,
  SDL_SCANCODE_BACKSLASH = 49,
  SDL_SCANCODE_NONUSHASH = 50,
  SDL_SCANCODE_SEMICOLON = 51,
  SDL_SCANCODE_APOSTROPHE = 52,
  SDL_SCANCODE_GRAVE = 53,
  SDL_SCANCODE_COMMA = 54,
  SDL_SCANCODE_PERIOD = 55,
  SDL_SCANCODE_SLASH = 56,
  SDL_SCANCODE_CAPSLOCK = 57,
  SDL_SCANCODE_F1 = 58,
  SDL_SCANCODE_F2 = 59,
  SDL_SCANCODE_F3 = 60,
  SDL_SCANCODE_F4 = 61,
  SDL_SCANCODE_F5 = 62,
  SDL_SCANCODE_F6 = 63,
  SDL_SCANCODE_F7 = 64,
  SDL_SCANCODE_F8 = 65,
  SDL_SCANCODE_F9 = 66,
  SDL_SCANCODE_F10 = 67,
  SDL_SCANCODE_F11 = 68,
  SDL_SCANCODE_F12 = 69,
  SDL_SCANCODE_PRINTSCREEN = 70,
  SDL_SCANCODE_SCROLLLOCK = 71,
  SDL_SCANCODE_PAUSE = 72,
  SDL_SCANCODE_INSERT = 73,
  SDL_SCANCODE_HOME = 74,
  SDL_SCANCODE_PAGEUP = 75,
  SDL_SCANCODE_DELETE = 76,
  SDL_SCANCODE_END = 77,
  SDL_SCANCODE_PAGEDOWN = 78,
  SDL_SCANCODE_RIGHT = 79,
  SDL_SCANCODE_LEFT = 80,
  SDL_SCANCODE_DOWN = 81,
  SDL_SCANCODE_UP = 82,
  SDL_SCANCODE_NUMLOCKCLEAR = 83,
  SDL_SCANCODE_KP_DIVIDE = 84,
  SDL_SCANCODE_KP_MULTIPLY = 85,
  SDL_SCANCODE_KP_MINUS = 86,
  SDL_SCANCODE_KP_PLUS = 87,
  SDL_SCANCODE_KP_ENTER = 88,
  SDL_SCANCODE_KP_1 = 89,
  SDL_SCANCODE_KP_2 = 90,
  SDL_SCANCODE_KP_3 = 91,
  SDL_SCANCODE_KP_4 = 92,
  SDL_SCANCODE_KP_5 = 93,
  SDL_SCANCODE_KP_6 = 94,
  SDL_SCANCODE_KP_7 = 95,
  SDL_SCANCODE_KP_8 = 96,
  SDL_SCANCODE_KP_9 = 97,
  SDL_SCANCODE_KP_0 = 98,
  SDL_SCANCODE_KP_PERIOD = 99,
  SDL_SCANCODE_NONUSBACKSLASH = 100,
  SDL_SCANCODE_APPLICATION = 101,
  SDL_SCANCODE_POWER = 102,
  SDL_SCANCODE_KP_EQUALS = 103,
  SDL_SCANCODE_F13 = 104,
  SDL_SCANCODE_F14 = 105,
  SDL_SCANCODE_F15 = 106,
  SDL_SCANCODE_F16 = 107,
  SDL_SCANCODE_F17 = 108,
  SDL_SCANCODE_F18 = 109,
  SDL_SCANCODE_F19 = 110,
  SDL_SCANCODE_F20 = 111,
  SDL_SCANCODE_F21 = 112,
  SDL_SCANCODE_F22 = 113,
  SDL_SCANCODE_F23 = 114,
  SDL_SCANCODE_F24 = 115,
  SDL_SCANCODE_EXECUTE = 116,
  SDL_SCANCODE_HELP = 117,
  SDL_SCANCODE_MENU = 118,
  SDL_SCANCODE_SELECT = 119,
  SDL_SCANCODE_STOP = 120,
  SDL_SCANCODE_AGAIN = 121,
  SDL_SCANCODE_UNDO = 122,
  SDL_SCANCODE_CUT = 123,
  SDL_SCANCODE_COPY = 124,
  SDL_SCANCODE_PASTE = 125,
  SDL_SCANCODE_FIND = 126,
  SDL_SCANCODE_MUTE = 127,
  SDL_SCANCODE_VOLUMEUP = 128,
  SDL_SCANCODE_VOLUMEDOWN = 129,
  SDL_SCANCODE_KP_COMMA = 133,
  SDL_SCANCODE_KP_EQUALSAS400 = 134,
  SDL_SCANCODE_INTERNATIONAL1 = 135,
  SDL_SCANCODE_INTERNATIONAL2 = 136,
  SDL_SCANCODE_INTERNATIONAL3 = 137,
  SDL_SCANCODE_INTERNATIONAL4 = 138,
  SDL_SCANCODE_INTERNATIONAL5 = 139,
  SDL_SCANCODE_INTERNATIONAL6 = 140,
  SDL_SCANCODE_INTERNATIONAL7 = 141,
  SDL_SCANCODE_INTERNATIONAL8 = 142,
  SDL_SCANCODE_INTERNATIONAL9 = 143,
  SDL_SCANCODE_LANG1 = 144,
  SDL_SCANCODE_LANG2 = 145,
  SDL_SCANCODE_LANG3 = 146,
  SDL_SCANCODE_LANG4 = 147,
  SDL_SCANCODE_LANG5 = 148,
  SDL_SCANCODE_LANG6 = 149,
  SDL_SCANCODE_LANG7 = 150,
  SDL_SCANCODE_LANG8 = 151,
  SDL_SCANCODE_LANG9 = 152,
  SDL_SCANCODE_ALTERASE = 153,
  SDL_SCANCODE_SYSREQ = 154,
  SDL_SCANCODE_CANCEL = 155,
  SDL_SCANCODE_CLEAR = 156,
  SDL_SCANCODE_PRIOR = 157,
  SDL_SCANCODE_RETURN2 = 158,
  SDL_SCANCODE_SEPARATOR = 159,
  SDL_SCANCODE_OUT = 160,
  SDL_SCANCODE_OPER = 161,
  SDL_SCANCODE_CLEARAGAIN = 162,
  SDL_SCANCODE_CRSEL = 163,
  SDL_SCANCODE_EXSEL = 164,
  SDL_SCANCODE_KP_00 = 176,
  SDL_SCANCODE_KP_000 = 177,
  SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
  SDL_SCANCODE_DECIMALSEPARATOR = 179,
  SDL_SCANCODE_CURRENCYUNIT = 180,
  SDL_SCANCODE_CURRENCYSUBUNIT = 181,
  SDL_SCANCODE_KP_LEFTPAREN = 182,
  SDL_SCANCODE_KP_RIGHTPAREN = 183,
  SDL_SCANCODE_KP_LEFTBRACE = 184,
  SDL_SCANCODE_KP_RIGHTBRACE = 185,
  SDL_SCANCODE_KP_TAB = 186,
  SDL_SCANCODE_KP_BACKSPACE = 187,
  SDL_SCANCODE_KP_A = 188,
  SDL_SCANCODE_KP_B = 189,
  SDL_SCANCODE_KP_C = 190,
  SDL_SCANCODE_KP_D = 191,
  SDL_SCANCODE_KP_E = 192,
  SDL_SCANCODE_KP_F = 193,
  SDL_SCANCODE_KP_XOR = 194,
  SDL_SCANCODE_KP_POWER = 195,
  SDL_SCANCODE_KP_PERCENT = 196,
  SDL_SCANCODE_KP_LESS = 197,
  SDL_SCANCODE_KP_GREATER = 198,
  SDL_SCANCODE_KP_AMPERSAND = 199,
  SDL_SCANCODE_KP_DBLAMPERSAND = 200,
  SDL_SCANCODE_KP_VERTICALBAR = 201,
  SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
  SDL_SCANCODE_KP_COLON = 203,
  SDL_SCANCODE_KP_HASH = 204,
  SDL_SCANCODE_KP_SPACE = 205,
  SDL_SCANCODE_KP_AT = 206,
  SDL_SCANCODE_KP_EXCLAM = 207,
  SDL_SCANCODE_KP_MEMSTORE = 208,
  SDL_SCANCODE_KP_MEMRECALL = 209,
  SDL_SCANCODE_KP_MEMCLEAR = 210,
  SDL_SCANCODE_KP_MEMADD = 211,
  SDL_SCANCODE_KP_MEMSUBTRACT = 212,
  SDL_SCANCODE_KP_MEMMULTIPLY = 213,
  SDL_SCANCODE_KP_MEMDIVIDE = 214,
  SDL_SCANCODE_KP_PLUSMINUS = 215,
  SDL_SCANCODE_KP_CLEAR = 216,
  SDL_SCANCODE_KP_CLEARENTRY = 217,
  SDL_SCANCODE_KP_BINARY = 218,
  SDL_SCANCODE_KP_OCTAL = 219,
  SDL_SCANCODE_KP_DECIMAL = 220,
  SDL_SCANCODE_KP_HEXADECIMAL = 221,
  SDL_SCANCODE_LCTRL = 224,
  SDL_SCANCODE_LSHIFT = 225,
  SDL_SCANCODE_LALT = 226,
  SDL_SCANCODE_LGUI = 227,
  SDL_SCANCODE_RCTRL = 228,
  SDL_SCANCODE_RSHIFT = 229,
  SDL_SCANCODE_RALT = 230,
  SDL_SCANCODE_RGUI = 231,
  SDL_SCANCODE_MODE = 257,
  SDL_SCANCODE_AUDIONEXT = 258,
  SDL_SCANCODE_AUDIOPREV = 259,
  SDL_SCANCODE_AUDIOSTOP = 260,
  SDL_SCANCODE_AUDIOPLAY = 261,
  SDL_SCANCODE_AUDIOMUTE = 262,
  SDL_SCANCODE_MEDIASELECT = 263,
  SDL_SCANCODE_WWW = 264,
  SDL_SCANCODE_MAIL = 265,
  SDL_SCANCODE_CALCULATOR = 266,
  SDL_SCANCODE_COMPUTER = 267,
  SDL_SCANCODE_AC_SEARCH = 268,
  SDL_SCANCODE_AC_HOME = 269,
  SDL_SCANCODE_AC_BACK = 270,
  SDL_SCANCODE_AC_FORWARD = 271,
  SDL_SCANCODE_AC_STOP = 272,
  SDL_SCANCODE_AC_REFRESH = 273,
  SDL_SCANCODE_AC_BOOKMARKS = 274,
  SDL_SCANCODE_BRIGHTNESSDOWN = 275,
  SDL_SCANCODE_BRIGHTNESSUP = 276,
  SDL_SCANCODE_DISPLAYSWITCH = 277,
  SDL_SCANCODE_KBDILLUMTOGGLE = 278,
  SDL_SCANCODE_KBDILLUMDOWN = 279,
  SDL_SCANCODE_KBDILLUMUP = 280,
  SDL_SCANCODE_EJECT = 281,
  SDL_SCANCODE_SLEEP = 282,
  SDL_SCANCODE_APP1 = 283,
  SDL_SCANCODE_APP2 = 284,
  SDL_SCANCODE_AUDIOREWIND = 285,
  SDL_SCANCODE_AUDIOFASTFORWARD = 286,
  SDL_NUM_SCANCODES = 512
} SDL_Scancode;

typedef Sint32 SDL_Keycode;

enum {
  SDLK_UNKNOWN = 0,
  SDLK_RETURN = '\r',
  SDLK_ESCAPE = '\033',
  SDLK_BACKSPACE = '\b',
  SDLK_TAB = '\t',
  SDLK_SPACE = ' ',
  SDLK_EXCLAIM = '!',
  SDLK_QUOTEDBL = '"',
  SDLK_HASH = '#',
  SDLK_PERCENT = '%',
  SDLK_DOLLAR = '$',
  SDLK_AMPERSAND = '&',
  SDLK_LEFTPAREN = '(',
  SDLK_RIGHTPAREN = ')',
  SDLK_ASTERISK = '*',
  SDLK_PLUS = '+',
  SDLK_COMMA = ',',
  SDLK_MINUS = '-',
  SDLK_PERIOD = '.',
  SDLK_SLASH = '/',
  SDLK_0 = '0',
  SDLK_1 = '1',
  SDLK_2 = '2',
  SDLK_3 = '3',
  SDLK_4 = '4',
  SDLK_5 = '5',
  SDLK_6 = '6',
  SDLK_7 = '7',
  SDLK_8 = '8',
  SDLK_9 = '9',
  SDLK_COLON = ':',
  SDLK_SEMICOLON = ';',
  SDLK_LESS = '<',
  SDLK_EQUALS = '=',
  SDLK_GREATER = '>',
  SDLK_QUESTION = '?',
  SDLK_AT = '@',
  SDLK_LEFTBRACKET = '[',
  SDLK_RIGHTBRACKET = ']',
  SDLK_CARET = '^',
  SDLK_UNDERSCORE = '_',
  SDLK_BACKQUOTE = '`',
  SDLK_a = 'a',
  SDLK_b = 'b',
  SDLK_c = 'c',
  SDLK_d = 'd',
  SDLK_e = 'e',
  SDLK_f = 'f',
  SDLK_g = 'g',
  SDLK_h = 'h',
  SDLK_i = 'i',
  SDLK_j = 'j',
  SDLK_k = 'k',
  SDLK_l = 'l',
  SDLK_m = 'm',
  SDLK_n = 'n',
  SDLK_o = 'o',
  SDLK_p = 'p',
  SDLK_q = 'q',
  SDLK_r = 'r',
  SDLK_s = 's',
  SDLK_t = 't',
  SDLK_u = 'u',
  SDLK_v = 'v',
  SDLK_w = 'w',
  SDLK_x = 'x',
  SDLK_y = 'y',
  SDLK_z = 'z',
  SDLK_CAPSLOCK = (SDL_SCANCODE_CAPSLOCK | (1 << 30)),
  SDLK_F1 = (SDL_SCANCODE_F1 | (1 << 30)),
  SDLK_F2 = (SDL_SCANCODE_F2 | (1 << 30)),
  SDLK_F3 = (SDL_SCANCODE_F3 | (1 << 30)),
  SDLK_F4 = (SDL_SCANCODE_F4 | (1 << 30)),
  SDLK_F5 = (SDL_SCANCODE_F5 | (1 << 30)),
  SDLK_F6 = (SDL_SCANCODE_F6 | (1 << 30)),
  SDLK_F7 = (SDL_SCANCODE_F7 | (1 << 30)),
  SDLK_F8 = (SDL_SCANCODE_F8 | (1 << 30)),
  SDLK_F9 = (SDL_SCANCODE_F9 | (1 << 30)),
  SDLK_F10 = (SDL_SCANCODE_F10 | (1 << 30)),
  SDLK_F11 = (SDL_SCANCODE_F11 | (1 << 30)),
  SDLK_F12 = (SDL_SCANCODE_F12 | (1 << 30)),
  SDLK_PRINTSCREEN = (SDL_SCANCODE_PRINTSCREEN | (1 << 30)),
  SDLK_SCROLLLOCK = (SDL_SCANCODE_SCROLLLOCK | (1 << 30)),
  SDLK_PAUSE = (SDL_SCANCODE_PAUSE | (1 << 30)),
  SDLK_INSERT = (SDL_SCANCODE_INSERT | (1 << 30)),
  SDLK_HOME = (SDL_SCANCODE_HOME | (1 << 30)),
  SDLK_PAGEUP = (SDL_SCANCODE_PAGEUP | (1 << 30)),
  SDLK_DELETE = '\177',
  SDLK_END = (SDL_SCANCODE_END | (1 << 30)),
  SDLK_PAGEDOWN = (SDL_SCANCODE_PAGEDOWN | (1 << 30)),
  SDLK_RIGHT = (SDL_SCANCODE_RIGHT | (1 << 30)),
  SDLK_LEFT = (SDL_SCANCODE_LEFT | (1 << 30)),
  SDLK_DOWN = (SDL_SCANCODE_DOWN | (1 << 30)),
  SDLK_UP = (SDL_SCANCODE_UP | (1 << 30)),
  SDLK_NUMLOCKCLEAR = (SDL_SCANCODE_NUMLOCKCLEAR | (1 << 30)),
  SDLK_KP_DIVIDE = (SDL_SCANCODE_KP_DIVIDE | (1 << 30)),
  SDLK_KP_MULTIPLY = (SDL_SCANCODE_KP_MULTIPLY | (1 << 30)),
  SDLK_KP_MINUS = (SDL_SCANCODE_KP_MINUS | (1 << 30)),
  SDLK_KP_PLUS = (SDL_SCANCODE_KP_PLUS | (1 << 30)),
  SDLK_KP_ENTER = (SDL_SCANCODE_KP_ENTER | (1 << 30)),
  SDLK_KP_1 = (SDL_SCANCODE_KP_1 | (1 << 30)),
  SDLK_KP_2 = (SDL_SCANCODE_KP_2 | (1 << 30)),
  SDLK_KP_3 = (SDL_SCANCODE_KP_3 | (1 << 30)),
  SDLK_KP_4 = (SDL_SCANCODE_KP_4 | (1 << 30)),
  SDLK_KP_5 = (SDL_SCANCODE_KP_5 | (1 << 30)),
  SDLK_KP_6 = (SDL_SCANCODE_KP_6 | (1 << 30)),
  SDLK_KP_7 = (SDL_SCANCODE_KP_7 | (1 << 30)),
  SDLK_KP_8 = (SDL_SCANCODE_KP_8 | (1 << 30)),
  SDLK_KP_9 = (SDL_SCANCODE_KP_9 | (1 << 30)),
  SDLK_KP_0 = (SDL_SCANCODE_KP_0 | (1 << 30)),
  SDLK_KP_PERIOD = (SDL_SCANCODE_KP_PERIOD | (1 << 30)),
  SDLK_APPLICATION = (SDL_SCANCODE_APPLICATION | (1 << 30)),
  SDLK_POWER = (SDL_SCANCODE_POWER | (1 << 30)),
  SDLK_KP_EQUALS = (SDL_SCANCODE_KP_EQUALS | (1 << 30)),
  SDLK_F13 = (SDL_SCANCODE_F13 | (1 << 30)),
  SDLK_F14 = (SDL_SCANCODE_F14 | (1 << 30)),
  SDLK_F15 = (SDL_SCANCODE_F15 | (1 << 30)),
  SDLK_F16 = (SDL_SCANCODE_F16 | (1 << 30)),
  SDLK_F17 = (SDL_SCANCODE_F17 | (1 << 30)),
  SDLK_F18 = (SDL_SCANCODE_F18 | (1 << 30)),
  SDLK_F19 = (SDL_SCANCODE_F19 | (1 << 30)),
  SDLK_F20 = (SDL_SCANCODE_F20 | (1 << 30)),
  SDLK_F21 = (SDL_SCANCODE_F21 | (1 << 30)),
  SDLK_F22 = (SDL_SCANCODE_F22 | (1 << 30)),
  SDLK_F23 = (SDL_SCANCODE_F23 | (1 << 30)),
  SDLK_F24 = (SDL_SCANCODE_F24 | (1 << 30)),
  SDLK_EXECUTE = (SDL_SCANCODE_EXECUTE | (1 << 30)),
  SDLK_HELP = (SDL_SCANCODE_HELP | (1 << 30)),
  SDLK_MENU = (SDL_SCANCODE_MENU | (1 << 30)),
  SDLK_SELECT = (SDL_SCANCODE_SELECT | (1 << 30)),
  SDLK_STOP = (SDL_SCANCODE_STOP | (1 << 30)),
  SDLK_AGAIN = (SDL_SCANCODE_AGAIN | (1 << 30)),
  SDLK_UNDO = (SDL_SCANCODE_UNDO | (1 << 30)),
  SDLK_CUT = (SDL_SCANCODE_CUT | (1 << 30)),
  SDLK_COPY = (SDL_SCANCODE_COPY | (1 << 30)),
  SDLK_PASTE = (SDL_SCANCODE_PASTE | (1 << 30)),
  SDLK_FIND = (SDL_SCANCODE_FIND | (1 << 30)),
  SDLK_MUTE = (SDL_SCANCODE_MUTE | (1 << 30)),
  SDLK_VOLUMEUP = (SDL_SCANCODE_VOLUMEUP | (1 << 30)),
  SDLK_VOLUMEDOWN = (SDL_SCANCODE_VOLUMEDOWN | (1 << 30)),
  SDLK_KP_COMMA = (SDL_SCANCODE_KP_COMMA | (1 << 30)),
  SDLK_KP_EQUALSAS400 = (SDL_SCANCODE_KP_EQUALSAS400 | (1 << 30)),
  SDLK_ALTERASE = (SDL_SCANCODE_ALTERASE | (1 << 30)),
  SDLK_SYSREQ = (SDL_SCANCODE_SYSREQ | (1 << 30)),
  SDLK_CANCEL = (SDL_SCANCODE_CANCEL | (1 << 30)),
  SDLK_CLEAR = (SDL_SCANCODE_CLEAR | (1 << 30)),
  SDLK_PRIOR = (SDL_SCANCODE_PRIOR | (1 << 30)),
  SDLK_RETURN2 = (SDL_SCANCODE_RETURN2 | (1 << 30)),
  SDLK_SEPARATOR = (SDL_SCANCODE_SEPARATOR | (1 << 30)),
  SDLK_OUT = (SDL_SCANCODE_OUT | (1 << 30)),
  SDLK_OPER = (SDL_SCANCODE_OPER | (1 << 30)),
  SDLK_CLEARAGAIN = (SDL_SCANCODE_CLEARAGAIN | (1 << 30)),
  SDLK_CRSEL = (SDL_SCANCODE_CRSEL | (1 << 30)),
  SDLK_EXSEL = (SDL_SCANCODE_EXSEL | (1 << 30)),
  SDLK_KP_00 = (SDL_SCANCODE_KP_00 | (1 << 30)),
  SDLK_KP_000 = (SDL_SCANCODE_KP_000 | (1 << 30)),
  SDLK_THOUSANDSSEPARATOR = (SDL_SCANCODE_THOUSANDSSEPARATOR | (1 << 30)),
  SDLK_DECIMALSEPARATOR = (SDL_SCANCODE_DECIMALSEPARATOR | (1 << 30)),
  SDLK_CURRENCYUNIT = (SDL_SCANCODE_CURRENCYUNIT | (1 << 30)),
  SDLK_CURRENCYSUBUNIT = (SDL_SCANCODE_CURRENCYSUBUNIT | (1 << 30)),
  SDLK_KP_LEFTPAREN = (SDL_SCANCODE_KP_LEFTPAREN | (1 << 30)),
  SDLK_KP_RIGHTPAREN = (SDL_SCANCODE_KP_RIGHTPAREN | (1 << 30)),
  SDLK_KP_LEFTBRACE = (SDL_SCANCODE_KP_LEFTBRACE | (1 << 30)),
  SDLK_KP_RIGHTBRACE = (SDL_SCANCODE_KP_RIGHTBRACE | (1 << 30)),
  SDLK_KP_TAB = (SDL_SCANCODE_KP_TAB | (1 << 30)),
  SDLK_KP_BACKSPACE = (SDL_SCANCODE_KP_BACKSPACE | (1 << 30)),
  SDLK_KP_A = (SDL_SCANCODE_KP_A | (1 << 30)),
  SDLK_KP_B = (SDL_SCANCODE_KP_B | (1 << 30)),
  SDLK_KP_C = (SDL_SCANCODE_KP_C | (1 << 30)),
  SDLK_KP_D = (SDL_SCANCODE_KP_D | (1 << 30)),
  SDLK_KP_E = (SDL_SCANCODE_KP_E | (1 << 30)),
  SDLK_KP_F = (SDL_SCANCODE_KP_F | (1 << 30)),
  SDLK_KP_XOR = (SDL_SCANCODE_KP_XOR | (1 << 30)),
  SDLK_KP_POWER = (SDL_SCANCODE_KP_POWER | (1 << 30)),
  SDLK_KP_PERCENT = (SDL_SCANCODE_KP_PERCENT | (1 << 30)),
  SDLK_KP_LESS = (SDL_SCANCODE_KP_LESS | (1 << 30)),
  SDLK_KP_GREATER = (SDL_SCANCODE_KP_GREATER | (1 << 30)),
  SDLK_KP_AMPERSAND = (SDL_SCANCODE_KP_AMPERSAND | (1 << 30)),
  SDLK_KP_DBLAMPERSAND = (SDL_SCANCODE_KP_DBLAMPERSAND | (1 << 30)),
  SDLK_KP_VERTICALBAR = (SDL_SCANCODE_KP_VERTICALBAR | (1 << 30)),
  SDLK_KP_DBLVERTICALBAR = (SDL_SCANCODE_KP_DBLVERTICALBAR | (1 << 30)),
  SDLK_KP_COLON = (SDL_SCANCODE_KP_COLON | (1 << 30)),
  SDLK_KP_HASH = (SDL_SCANCODE_KP_HASH | (1 << 30)),
  SDLK_KP_SPACE = (SDL_SCANCODE_KP_SPACE | (1 << 30)),
  SDLK_KP_AT = (SDL_SCANCODE_KP_AT | (1 << 30)),
  SDLK_KP_EXCLAM = (SDL_SCANCODE_KP_EXCLAM | (1 << 30)),
  SDLK_KP_MEMSTORE = (SDL_SCANCODE_KP_MEMSTORE | (1 << 30)),
  SDLK_KP_MEMRECALL = (SDL_SCANCODE_KP_MEMRECALL | (1 << 30)),
  SDLK_KP_MEMCLEAR = (SDL_SCANCODE_KP_MEMCLEAR | (1 << 30)),
  SDLK_KP_MEMADD = (SDL_SCANCODE_KP_MEMADD | (1 << 30)),
  SDLK_KP_MEMSUBTRACT = (SDL_SCANCODE_KP_MEMSUBTRACT | (1 << 30)),
  SDLK_KP_MEMMULTIPLY = (SDL_SCANCODE_KP_MEMMULTIPLY | (1 << 30)),
  SDLK_KP_MEMDIVIDE = (SDL_SCANCODE_KP_MEMDIVIDE | (1 << 30)),
  SDLK_KP_PLUSMINUS = (SDL_SCANCODE_KP_PLUSMINUS | (1 << 30)),
  SDLK_KP_CLEAR = (SDL_SCANCODE_KP_CLEAR | (1 << 30)),
  SDLK_KP_CLEARENTRY = (SDL_SCANCODE_KP_CLEARENTRY | (1 << 30)),
  SDLK_KP_BINARY = (SDL_SCANCODE_KP_BINARY | (1 << 30)),
  SDLK_KP_OCTAL = (SDL_SCANCODE_KP_OCTAL | (1 << 30)),
  SDLK_KP_DECIMAL = (SDL_SCANCODE_KP_DECIMAL | (1 << 30)),
  SDLK_KP_HEXADECIMAL = (SDL_SCANCODE_KP_HEXADECIMAL | (1 << 30)),
  SDLK_LCTRL = (SDL_SCANCODE_LCTRL | (1 << 30)),
  SDLK_LSHIFT = (SDL_SCANCODE_LSHIFT | (1 << 30)),
  SDLK_LALT = (SDL_SCANCODE_LALT | (1 << 30)),
  SDLK_LGUI = (SDL_SCANCODE_LGUI | (1 << 30)),
  SDLK_RCTRL = (SDL_SCANCODE_RCTRL | (1 << 30)),
  SDLK_RSHIFT = (SDL_SCANCODE_RSHIFT | (1 << 30)),
  SDLK_RALT = (SDL_SCANCODE_RALT | (1 << 30)),
  SDLK_RGUI = (SDL_SCANCODE_RGUI | (1 << 30)),
  SDLK_MODE = (SDL_SCANCODE_MODE | (1 << 30)),
  SDLK_AUDIONEXT = (SDL_SCANCODE_AUDIONEXT | (1 << 30)),
  SDLK_AUDIOPREV = (SDL_SCANCODE_AUDIOPREV | (1 << 30)),
  SDLK_AUDIOSTOP = (SDL_SCANCODE_AUDIOSTOP | (1 << 30)),
  SDLK_AUDIOPLAY = (SDL_SCANCODE_AUDIOPLAY | (1 << 30)),
  SDLK_AUDIOMUTE = (SDL_SCANCODE_AUDIOMUTE | (1 << 30)),
  SDLK_MEDIASELECT = (SDL_SCANCODE_MEDIASELECT | (1 << 30)),
  SDLK_WWW = (SDL_SCANCODE_WWW | (1 << 30)),
  SDLK_MAIL = (SDL_SCANCODE_MAIL | (1 << 30)),
  SDLK_CALCULATOR = (SDL_SCANCODE_CALCULATOR | (1 << 30)),
  SDLK_COMPUTER = (SDL_SCANCODE_COMPUTER | (1 << 30)),
  SDLK_AC_SEARCH = (SDL_SCANCODE_AC_SEARCH | (1 << 30)),
  SDLK_AC_HOME = (SDL_SCANCODE_AC_HOME | (1 << 30)),
  SDLK_AC_BACK = (SDL_SCANCODE_AC_BACK | (1 << 30)),
  SDLK_AC_FORWARD = (SDL_SCANCODE_AC_FORWARD | (1 << 30)),
  SDLK_AC_STOP = (SDL_SCANCODE_AC_STOP | (1 << 30)),
  SDLK_AC_REFRESH = (SDL_SCANCODE_AC_REFRESH | (1 << 30)),
  SDLK_AC_BOOKMARKS = (SDL_SCANCODE_AC_BOOKMARKS | (1 << 30)),
  SDLK_BRIGHTNESSDOWN = (SDL_SCANCODE_BRIGHTNESSDOWN | (1 << 30)),
  SDLK_BRIGHTNESSUP = (SDL_SCANCODE_BRIGHTNESSUP | (1 << 30)),
  SDLK_DISPLAYSWITCH = (SDL_SCANCODE_DISPLAYSWITCH | (1 << 30)),
  SDLK_KBDILLUMTOGGLE = (SDL_SCANCODE_KBDILLUMTOGGLE | (1 << 30)),
  SDLK_KBDILLUMDOWN = (SDL_SCANCODE_KBDILLUMDOWN | (1 << 30)),
  SDLK_KBDILLUMUP = (SDL_SCANCODE_KBDILLUMUP | (1 << 30)),
  SDLK_EJECT = (SDL_SCANCODE_EJECT | (1 << 30)),
  SDLK_SLEEP = (SDL_SCANCODE_SLEEP | (1 << 30)),
  SDLK_APP1 = (SDL_SCANCODE_APP1 | (1 << 30)),
  SDLK_APP2 = (SDL_SCANCODE_APP2 | (1 << 30)),
  SDLK_AUDIOREWIND = (SDL_SCANCODE_AUDIOREWIND | (1 << 30)),
  SDLK_AUDIOFASTFORWARD = (SDL_SCANCODE_AUDIOFASTFORWARD | (1 << 30))
};

typedef enum {
  KMOD_NONE = 0x0000,
  KMOD_LSHIFT = 0x0001,
  KMOD_RSHIFT = 0x0002,
  KMOD_LCTRL = 0x0040,
  KMOD_RCTRL = 0x0080,
  KMOD_LALT = 0x0100,
  KMOD_RALT = 0x0200,
  KMOD_LGUI = 0x0400,
  KMOD_RGUI = 0x0800,
  KMOD_NUM = 0x1000,
  KMOD_CAPS = 0x2000,
  KMOD_MODE = 0x4000,
  KMOD_RESERVED = 0x8000
} SDL_Keymod;

typedef struct SDL_Keysym {
  SDL_Scancode scancode;
  SDL_Keycode sym;
  Uint16 mod;
  Uint32 unused;
} SDL_Keysym;

typedef struct SDL_Cursor SDL_Cursor;

typedef enum {
  SDL_SYSTEM_CURSOR_ARROW,
  SDL_SYSTEM_CURSOR_IBEAM,
  SDL_SYSTEM_CURSOR_WAIT,
  SDL_SYSTEM_CURSOR_CROSSHAIR,
  SDL_SYSTEM_CURSOR_WAITARROW,
  SDL_SYSTEM_CURSOR_SIZENWSE,
  SDL_SYSTEM_CURSOR_SIZENESW,
  SDL_SYSTEM_CURSOR_SIZEWE,
  SDL_SYSTEM_CURSOR_SIZENS,
  SDL_SYSTEM_CURSOR_SIZEALL,
  SDL_SYSTEM_CURSOR_NO,
  SDL_SYSTEM_CURSOR_HAND,
  SDL_NUM_SYSTEM_CURSORS
} SDL_SystemCursor;

typedef enum {
  SDL_MOUSEWHEEL_NORMAL,
  SDL_MOUSEWHEEL_FLIPPED
} SDL_MouseWheelDirection;

struct _SDL_Joystick;

typedef struct _SDL_Joystick SDL_Joystick;

typedef struct {
  Uint8 data[16];
} SDL_JoystickGUID;

typedef Sint32 SDL_JoystickID;

typedef enum {
  SDL_JOYSTICK_TYPE_UNKNOWN,
  SDL_JOYSTICK_TYPE_GAMECONTROLLER,
  SDL_JOYSTICK_TYPE_WHEEL,
  SDL_JOYSTICK_TYPE_ARCADE_STICK,
  SDL_JOYSTICK_TYPE_FLIGHT_STICK,
  SDL_JOYSTICK_TYPE_DANCE_PAD,
  SDL_JOYSTICK_TYPE_GUITAR,
  SDL_JOYSTICK_TYPE_DRUM_KIT,
  SDL_JOYSTICK_TYPE_ARCADE_PAD,
  SDL_JOYSTICK_TYPE_THROTTLE
} SDL_JoystickType;

typedef enum {
  SDL_JOYSTICK_POWER_UNKNOWN = -1,
  SDL_JOYSTICK_POWER_EMPTY,
  SDL_JOYSTICK_POWER_LOW,
  SDL_JOYSTICK_POWER_MEDIUM,
  SDL_JOYSTICK_POWER_FULL,
  SDL_JOYSTICK_POWER_WIRED,
  SDL_JOYSTICK_POWER_MAX
} SDL_JoystickPowerLevel;

struct _SDL_GameController;

typedef struct _SDL_GameController SDL_GameController;

typedef enum {
  SDL_CONTROLLER_BINDTYPE_NONE = 0,
  SDL_CONTROLLER_BINDTYPE_BUTTON,
  SDL_CONTROLLER_BINDTYPE_AXIS,
  SDL_CONTROLLER_BINDTYPE_HAT
} SDL_GameControllerBindType;

typedef struct SDL_GameControllerButtonBind {
  SDL_GameControllerBindType bindType;
  union {
    int button;
    int axis;
    struct {
      int hat;
      int hat_mask;
    } hat;
  } value;
} SDL_GameControllerButtonBind;

typedef enum {
  SDL_CONTROLLER_AXIS_INVALID = -1,
  SDL_CONTROLLER_AXIS_LEFTX,
  SDL_CONTROLLER_AXIS_LEFTY,
  SDL_CONTROLLER_AXIS_RIGHTX,
  SDL_CONTROLLER_AXIS_RIGHTY,
  SDL_CONTROLLER_AXIS_TRIGGERLEFT,
  SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
  SDL_CONTROLLER_AXIS_MAX
} SDL_GameControllerAxis;

typedef enum {
  SDL_CONTROLLER_BUTTON_INVALID = -1,
  SDL_CONTROLLER_BUTTON_A,
  SDL_CONTROLLER_BUTTON_B,
  SDL_CONTROLLER_BUTTON_X,
  SDL_CONTROLLER_BUTTON_Y,
  SDL_CONTROLLER_BUTTON_BACK,
  SDL_CONTROLLER_BUTTON_GUIDE,
  SDL_CONTROLLER_BUTTON_START,
  SDL_CONTROLLER_BUTTON_LEFTSTICK,
  SDL_CONTROLLER_BUTTON_RIGHTSTICK,
  SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
  SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
  SDL_CONTROLLER_BUTTON_DPAD_UP,
  SDL_CONTROLLER_BUTTON_DPAD_DOWN,
  SDL_CONTROLLER_BUTTON_DPAD_LEFT,
  SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
  SDL_CONTROLLER_BUTTON_MAX
} SDL_GameControllerButton;

typedef Sint64 SDL_TouchID;

typedef Sint64 SDL_FingerID;

typedef enum {
  SDL_TOUCH_DEVICE_INVALID = -1,
  SDL_TOUCH_DEVICE_DIRECT,
  SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE,
  SDL_TOUCH_DEVICE_INDIRECT_RELATIVE
} SDL_TouchDeviceType;

typedef struct SDL_Finger {
  SDL_FingerID id;
  float x;
  float y;
  float pressure;
} SDL_Finger;

typedef Sint64 SDL_GestureID;

typedef enum {
  SDL_FIRSTEVENT = 0,
  SDL_QUIT = 0x100,
  SDL_APP_TERMINATING,
  SDL_APP_LOWMEMORY,
  SDL_APP_WILLENTERBACKGROUND,
  SDL_APP_DIDENTERBACKGROUND,
  SDL_APP_WILLENTERFOREGROUND,
  SDL_APP_DIDENTERFOREGROUND,
  SDL_DISPLAYEVENT = 0x150,
  SDL_WINDOWEVENT = 0x200,
  SDL_SYSWMEVENT,
  SDL_KEYDOWN = 0x300,
  SDL_KEYUP,
  SDL_TEXTEDITING,
  SDL_TEXTINPUT,
  SDL_KEYMAPCHANGED,
  SDL_MOUSEMOTION = 0x400,
  SDL_MOUSEBUTTONDOWN,
  SDL_MOUSEBUTTONUP,
  SDL_MOUSEWHEEL,
  SDL_JOYAXISMOTION = 0x600,
  SDL_JOYBALLMOTION,
  SDL_JOYHATMOTION,
  SDL_JOYBUTTONDOWN,
  SDL_JOYBUTTONUP,
  SDL_JOYDEVICEADDED,
  SDL_JOYDEVICEREMOVED,
  SDL_CONTROLLERAXISMOTION = 0x650,
  SDL_CONTROLLERBUTTONDOWN,
  SDL_CONTROLLERBUTTONUP,
  SDL_CONTROLLERDEVICEADDED,
  SDL_CONTROLLERDEVICEREMOVED,
  SDL_CONTROLLERDEVICEREMAPPED,
  SDL_FINGERDOWN = 0x700,
  SDL_FINGERUP,
  SDL_FINGERMOTION,
  SDL_DOLLARGESTURE = 0x800,
  SDL_DOLLARRECORD,
  SDL_MULTIGESTURE,
  SDL_CLIPBOARDUPDATE = 0x900,
  SDL_DROPFILE = 0x1000,
  SDL_DROPTEXT,
  SDL_DROPBEGIN,
  SDL_DROPCOMPLETE,
  SDL_AUDIODEVICEADDED = 0x1100,
  SDL_AUDIODEVICEREMOVED,
  SDL_SENSORUPDATE = 0x1200,
  SDL_RENDER_TARGETS_RESET = 0x2000,
  SDL_RENDER_DEVICE_RESET,
  SDL_USEREVENT = 0x8000,
  SDL_LASTEVENT = 0xFFFF
} SDL_EventType;

typedef struct SDL_CommonEvent {
  Uint32 type;
  Uint32 timestamp;
} SDL_CommonEvent;

typedef struct SDL_DisplayEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 display;
  Uint8 event;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint32 data1;
} SDL_DisplayEvent;

typedef struct SDL_WindowEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint8 event;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint32 data1;
  Sint32 data2;
} SDL_WindowEvent;

typedef struct SDL_KeyboardEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint8 state;
  Uint8 repeat;
  Uint8 padding2;
  Uint8 padding3;
  SDL_Keysym keysym;
} SDL_KeyboardEvent;

typedef struct SDL_TextEditingEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  char text[(32)];
  Sint32 start;
  Sint32 length;
} SDL_TextEditingEvent;

typedef struct SDL_TextInputEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  char text[(32)];
} SDL_TextInputEvent;

typedef struct SDL_MouseMotionEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint32 which;
  Uint32 state;
  Sint32 x;
  Sint32 y;
  Sint32 xrel;
  Sint32 yrel;
} SDL_MouseMotionEvent;

typedef struct SDL_MouseButtonEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint32 which;
  Uint8 button;
  Uint8 state;
  Uint8 clicks;
  Uint8 padding1;
  Sint32 x;
  Sint32 y;
} SDL_MouseButtonEvent;

typedef struct SDL_MouseWheelEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint32 which;
  Sint32 x;
  Sint32 y;
  Uint32 direction;
} SDL_MouseWheelEvent;

typedef struct SDL_JoyAxisEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 axis;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint16 value;
  Uint16 padding4;
} SDL_JoyAxisEvent;

typedef struct SDL_JoyBallEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 ball;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint16 xrel;
  Sint16 yrel;
} SDL_JoyBallEvent;

typedef struct SDL_JoyHatEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 hat;
  Uint8 value;
  Uint8 padding1;
  Uint8 padding2;
} SDL_JoyHatEvent;

typedef struct SDL_JoyButtonEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 button;
  Uint8 state;
  Uint8 padding1;
  Uint8 padding2;
} SDL_JoyButtonEvent;

typedef struct SDL_JoyDeviceEvent {
  Uint32 type;
  Uint32 timestamp;
  Sint32 which;
} SDL_JoyDeviceEvent;

typedef struct SDL_ControllerAxisEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 axis;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint16 value;
  Uint16 padding4;
} SDL_ControllerAxisEvent;

typedef struct SDL_ControllerButtonEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 button;
  Uint8 state;
  Uint8 padding1;
  Uint8 padding2;
} SDL_ControllerButtonEvent;

typedef struct SDL_ControllerDeviceEvent {
  Uint32 type;
  Uint32 timestamp;
  Sint32 which;
} SDL_ControllerDeviceEvent;

typedef struct SDL_AudioDeviceEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 which;
  Uint8 iscapture;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
} SDL_AudioDeviceEvent;

typedef struct SDL_TouchFingerEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_TouchID touchId;
  SDL_FingerID fingerId;
  float x;
  float y;
  float dx;
  float dy;
  float pressure;
} SDL_TouchFingerEvent;

typedef struct SDL_MultiGestureEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_TouchID touchId;
  float dTheta;
  float dDist;
  float x;
  float y;
  Uint16 numFingers;
  Uint16 padding;
} SDL_MultiGestureEvent;

typedef struct SDL_DollarGestureEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_TouchID touchId;
  SDL_GestureID gestureId;
  Uint32 numFingers;
  float error;
  float x;
  float y;
} SDL_DollarGestureEvent;

typedef struct SDL_DropEvent {
  Uint32 type;
  Uint32 timestamp;
  char* file;
  Uint32 windowID;
} SDL_DropEvent;

typedef struct SDL_SensorEvent {
  Uint32 type;
  Uint32 timestamp;
  Sint32 which;
  float data[6];
} SDL_SensorEvent;

typedef struct SDL_QuitEvent {
  Uint32 type;
  Uint32 timestamp;
} SDL_QuitEvent;

typedef struct SDL_OSEvent {
  Uint32 type;
  Uint32 timestamp;
} SDL_OSEvent;

typedef struct SDL_UserEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Sint32 code;
  void* data1;
  void* data2;
} SDL_UserEvent;

struct SDL_SysWMmsg;

typedef struct SDL_SysWMmsg SDL_SysWMmsg;

typedef struct SDL_SysWMEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_SysWMmsg* msg;
} SDL_SysWMEvent;

typedef union SDL_Event {
  Uint32 type;
  SDL_CommonEvent common;
  SDL_DisplayEvent display;
  SDL_WindowEvent window;
  SDL_KeyboardEvent key;
  SDL_TextEditingEvent edit;
  SDL_TextInputEvent text;
  SDL_MouseMotionEvent motion;
  SDL_MouseButtonEvent button;
  SDL_MouseWheelEvent wheel;
  SDL_JoyAxisEvent jaxis;
  SDL_JoyBallEvent jball;
  SDL_JoyHatEvent jhat;
  SDL_JoyButtonEvent jbutton;
  SDL_JoyDeviceEvent jdevice;
  SDL_ControllerAxisEvent caxis;
  SDL_ControllerButtonEvent cbutton;
  SDL_ControllerDeviceEvent cdevice;
  SDL_AudioDeviceEvent adevice;
  SDL_SensorEvent sensor;
  SDL_QuitEvent quit;
  SDL_UserEvent user;
  SDL_SysWMEvent syswm;
  SDL_TouchFingerEvent tfinger;
  SDL_MultiGestureEvent mgesture;
  SDL_DollarGestureEvent dgesture;
  SDL_DropEvent drop;
  Uint8 padding[56];
} SDL_Event;

typedef enum {
  SDL_ADDEVENT,
  SDL_PEEKEVENT,
  SDL_GETEVENT
} SDL_EventAction;

typedef int (* SDL_EventFilter)(void* userdata, SDL_Event* event);

struct _SDL_Haptic;

typedef struct _SDL_Haptic SDL_Haptic;

typedef struct SDL_HapticDirection {
  Uint8 type;
  Sint32 dir[3];
} SDL_HapticDirection;

typedef struct SDL_HapticConstant {
  Uint16 type;
  SDL_HapticDirection direction;
  Uint32 length;
  Uint16 delay;
  Uint16 button;
  Uint16 interval;
  Sint16 level;
  Uint16 attack_length;
  Uint16 attack_level;
  Uint16 fade_length;
  Uint16 fade_level;
} SDL_HapticConstant;

typedef struct SDL_HapticPeriodic {
  Uint16 type;
  SDL_HapticDirection direction;
  Uint32 length;
  Uint16 delay;
  Uint16 button;
  Uint16 interval;
  Uint16 period;
  Sint16 magnitude;
  Sint16 offset;
  Uint16 phase;
  Uint16 attack_length;
  Uint16 attack_level;
  Uint16 fade_length;
  Uint16 fade_level;
} SDL_HapticPeriodic;

typedef struct SDL_HapticCondition {
  Uint16 type;
  SDL_HapticDirection direction;
  Uint32 length;
  Uint16 delay;
  Uint16 button;
  Uint16 interval;
  Uint16 right_sat[3];
  Uint16 left_sat[3];
  Sint16 right_coeff[3];
  Sint16 left_coeff[3];
  Uint16 deadband[3];
  Sint16 center[3];
} SDL_HapticCondition;

typedef struct SDL_HapticRamp {
  Uint16 type;
  SDL_HapticDirection direction;
  Uint32 length;
  Uint16 delay;
  Uint16 button;
  Uint16 interval;
  Sint16 start;
  Sint16 end;
  Uint16 attack_length;
  Uint16 attack_level;
  Uint16 fade_length;
  Uint16 fade_level;
} SDL_HapticRamp;

typedef struct SDL_HapticLeftRight {
  Uint16 type;
  Uint32 length;
  Uint16 large_magnitude;
  Uint16 small_magnitude;
} SDL_HapticLeftRight;

typedef struct SDL_HapticCustom {
  Uint16 type;
  SDL_HapticDirection direction;
  Uint32 length;
  Uint16 delay;
  Uint16 button;
  Uint16 interval;
  Uint8 channels;
  Uint16 period;
  Uint16 samples;
  Uint16 *data;
  Uint16 attack_length;
  Uint16 attack_level;
  Uint16 fade_length;
  Uint16 fade_level;
} SDL_HapticCustom;

typedef union SDL_HapticEffect {
  Uint16 type;
  SDL_HapticConstant constant;
  SDL_HapticPeriodic periodic;
  SDL_HapticCondition condition;
  SDL_HapticRamp ramp;
  SDL_HapticLeftRight leftright;
  SDL_HapticCustom custom;
} SDL_HapticEffect;

typedef enum {
  SDL_HINT_DEFAULT,
  SDL_HINT_NORMAL,
  SDL_HINT_OVERRIDE
} SDL_HintPriority;

enum {
  SDL_LOG_CATEGORY_APPLICATION,
  SDL_LOG_CATEGORY_ERROR,
  SDL_LOG_CATEGORY_ASSERT,
  SDL_LOG_CATEGORY_SYSTEM,
  SDL_LOG_CATEGORY_AUDIO,
  SDL_LOG_CATEGORY_VIDEO,
  SDL_LOG_CATEGORY_RENDER,
  SDL_LOG_CATEGORY_INPUT,
  SDL_LOG_CATEGORY_TEST,
  SDL_LOG_CATEGORY_RESERVED1,
  SDL_LOG_CATEGORY_RESERVED2,
  SDL_LOG_CATEGORY_RESERVED3,
  SDL_LOG_CATEGORY_RESERVED4,
  SDL_LOG_CATEGORY_RESERVED5,
  SDL_LOG_CATEGORY_RESERVED6,
  SDL_LOG_CATEGORY_RESERVED7,
  SDL_LOG_CATEGORY_RESERVED8,
  SDL_LOG_CATEGORY_RESERVED9,
  SDL_LOG_CATEGORY_RESERVED10,
  SDL_LOG_CATEGORY_CUSTOM
};

typedef enum {
  SDL_LOG_PRIORITY_VERBOSE = 1,
  SDL_LOG_PRIORITY_DEBUG,
  SDL_LOG_PRIORITY_INFO,
  SDL_LOG_PRIORITY_WARN,
  SDL_LOG_PRIORITY_ERROR,
  SDL_LOG_PRIORITY_CRITICAL,
  SDL_NUM_LOG_PRIORITIES
} SDL_LogPriority;

typedef void (* SDL_LogOutputFunction)(void* userdata, int category, SDL_LogPriority priority, const char* message);

typedef enum {
  SDL_MESSAGEBOX_ERROR = 0x00000010,
  SDL_MESSAGEBOX_WARNING = 0x00000020,
  SDL_MESSAGEBOX_INFORMATION = 0x00000040
} SDL_MessageBoxFlags;

typedef enum {
  SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001,
  SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002
} SDL_MessageBoxButtonFlags;

typedef struct {
  Uint32 flags;
  int buttonid;
  const char* text;
} SDL_MessageBoxButtonData;

typedef struct {
  Uint8 r, g, b;
} SDL_MessageBoxColor;

typedef enum {
  SDL_MESSAGEBOX_COLOR_BACKGROUND,
  SDL_MESSAGEBOX_COLOR_TEXT,
  SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,
  SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,
  SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,
  SDL_MESSAGEBOX_COLOR_MAX
} SDL_MessageBoxColorType;

typedef struct {
  SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_MAX];
} SDL_MessageBoxColorScheme;

typedef struct {
  Uint32 flags;
  SDL_Window* window;
  const char* title;
  const char* message;
  int numbuttons;
  const SDL_MessageBoxButtonData* buttons;
  const SDL_MessageBoxColorScheme* colorScheme;
} SDL_MessageBoxData;

typedef enum {
  SDL_POWERSTATE_UNKNOWN,
  SDL_POWERSTATE_ON_BATTERY,
  SDL_POWERSTATE_NO_BATTERY,
  SDL_POWERSTATE_CHARGING,
  SDL_POWERSTATE_CHARGED
} SDL_PowerState;

typedef enum {
  SDL_RENDERER_SOFTWARE = 0x00000001,
  SDL_RENDERER_ACCELERATED = 0x00000002,
  SDL_RENDERER_PRESENTVSYNC = 0x00000004,
  SDL_RENDERER_TARGETTEXTURE = 0x00000008
} SDL_RendererFlags;

typedef struct SDL_RendererInfo {
  const char* name;
  Uint32 flags;
  Uint32 num_texture_formats;
  Uint32 texture_formats[16];
  int max_texture_width;
  int max_texture_height;
} SDL_RendererInfo;

typedef enum {
  SDL_TEXTUREACCESS_STATIC,
  SDL_TEXTUREACCESS_STREAMING,
  SDL_TEXTUREACCESS_TARGET
} SDL_TextureAccess;

typedef enum {
  SDL_TEXTUREMODULATE_NONE = 0x00000000,
  SDL_TEXTUREMODULATE_COLOR = 0x00000001,
  SDL_TEXTUREMODULATE_ALPHA = 0x00000002
} SDL_TextureModulate;

typedef enum {
  SDL_FLIP_NONE = 0x00000000,
  SDL_FLIP_HORIZONTAL = 0x00000001,
  SDL_FLIP_VERTICAL = 0x00000002
} SDL_RendererFlip;
struct SDL_Renderer;

typedef struct SDL_Renderer SDL_Renderer;

struct SDL_Texture;

typedef struct SDL_Texture SDL_Texture;

typedef enum {
  ShapeModeDefault,
  ShapeModeBinarizeAlpha,
  ShapeModeReverseBinarizeAlpha,
  ShapeModeColorKey
} WindowShapeMode;

typedef union {
  Uint8 binarizationCutoff;
  SDL_Color colorKey;
} SDL_WindowShapeParams;

typedef struct SDL_WindowShapeMode {
  WindowShapeMode mode;
  SDL_WindowShapeParams parameters;
} SDL_WindowShapeMode;

typedef Uint32 (* SDL_TimerCallback)(Uint32 interval, void* param);

typedef int SDL_TimerID;

typedef struct SDL_Version {
  Uint8 major;
  Uint8 minor;
  Uint8 patch;
} SDL_Version;

typedef void (* SDL_HintCallback)(void* userdata, const char* name, const char* oldValue, const char* newValue);


// =====================================================================================================================
//   SDL >= 2.0.1
//
//   https://discourse.libsdl.org/t/sdl-2-0-1-released/40
// =====================================================================================================================

#if version >= 2.0.1
    #ifdef __WIN32__
        typedef struct IDirect3DDevice9 IDirect3DDevice9;
    #endif
#endif

// =====================================================================================================================
//   SDL >= 2.0.4
//
//   FIXME There is no release of notes for this version
//   FIXME Possible errors line "C function not found"
// =====================================================================================================================

#if version >= 2.0.4
    #ifdef __WIN32__
        typedef void (* SDL_WindowsMessageHook)(void* userdata, void* hWnd, unsigned int message, Uint64 wParam, Sint64 lParam);
    #endif
#endif

// =====================================================================================================================
//   SDL >= 2.0.6
//
//   https://discourse.libsdl.org/t/sdl-2-0-6-prerelease/23024
// =====================================================================================================================

#if version >= 2.0.6
    typedef void* VkInstance;
    typedef VkInstance SDL_VulkanInstance;

    typedef uint64_t VkSurfaceKHR;
    typedef VkSurfaceKHR SDL_VulkanSurface; /*for compatibility with Tizen */
#endif

// =====================================================================================================================
//   SDL >= 2.0.7
//
//   https://discourse.libsdl.org/t/sdl-2-0-7-released/23279
// =====================================================================================================================

#if version >= 2.0.7
    typedef void *(*SDL_MallocFunc)(size_t size);
    typedef void *(*SDL_CallocFunc)(size_t nmemb, size_t size);
    typedef void *(*SDL_ReallocFunc)(void* mem, size_t size);
    typedef void (*SDL_FreeFunc)(void* mem);
#endif

// =====================================================================================================================
//   SDL >= 2.0.9
//
//   https://discourse.libsdl.org/t/sdl-2-0-9-released/25228
// =====================================================================================================================

#if version >= 2.0.9
    // New Sensor API: Defines
    typedef Sint32 SDL_SensorID;
    struct _SDL_Sensor;
    typedef struct _SDL_Sensor SDL_Sensor;
    typedef enum {
      SDL_SENSOR_INVALID = -1,
      SDL_SENSOR_UNKNOWN,
      SDL_SENSOR_ACCEL,
      SDL_SENSOR_GYRO
    } SDL_SensorType;
#endif
